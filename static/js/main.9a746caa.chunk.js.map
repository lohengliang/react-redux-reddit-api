{"version":3,"sources":["actions.js","reducers.js","configureStore.js","components/Picker.js","components/Posts.js","containers/AsyncApp.js","containers/Root.js","index.js"],"names":["fetchPosts","subreddit","dispatch","type","requestPosts","fetch","then","response","json","posts","data","children","map","child","receivedAt","Date","now","receivePosts","fetchPostsIfNeeded","getState","state","postsBySubreddit","isFetching","didInvalidate","shouldFetchPosts","items","action","Object","assign","lastUpdated","rootReducer","combineReducers","selectedSubreddit","loggerMiddleware","createLogger","Picker","this","props","value","onChange","options","e","target","option","key","Component","Posts","post","i","title","AsyncApp","handleChange","bind","handleRefreshClick","prevProps","nextSubreddit","preventDefault","toLocaleTimeString","onClick","length","style","opacity","connect","preloadedState","store","createStore","applyMiddleware","thunkMiddleware","Root","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a746caa.chunk.js","sourcesContent":["import fetch from 'cross-fetch'\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS'\r\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\r\nexport const SELECT_SUBREDDIT = 'SELECT_SUBREDDIT'\r\nexport const INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT'\r\nexport function selectSubreddit(subreddit) {\r\n  return {\r\n    type: SELECT_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\nexport function invalidateSubreddit(subreddit) {\r\n  return {\r\n    type: INVALIDATE_SUBREDDIT,\r\n    subreddit\r\n  }\r\n}\r\nfunction requestPosts(subreddit) {\r\n  return {\r\n    type: REQUEST_POSTS,\r\n    subreddit\r\n  }\r\n}\r\nfunction receivePosts(subreddit, json) {\r\n  return {\r\n    type: RECEIVE_POSTS,\r\n    subreddit,\r\n    posts: json.data.children.map(child => child.data),\r\n    receivedAt: Date.now()\r\n  }\r\n}\r\nfunction fetchPosts(subreddit) {\r\n  return dispatch => {\r\n    dispatch(requestPosts(subreddit))\r\n    return fetch(`https://www.reddit.com/r/${subreddit}.json`)\r\n      .then(response => response.json())\r\n      .then(json => dispatch(receivePosts(subreddit, json)))\r\n  }\r\n}\r\nfunction shouldFetchPosts(state, subreddit) {\r\n  const posts = state.postsBySubreddit[subreddit]\r\n  if (!posts) {\r\n    return true\r\n  } else if (posts.isFetching) {\r\n    return false\r\n  } else {\r\n    return posts.didInvalidate\r\n  }\r\n}\r\nexport function fetchPostsIfNeeded(subreddit) {\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchPosts(getState(), subreddit)) {\r\n      return dispatch(fetchPosts(subreddit))\r\n    }\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport {\r\n  SELECT_SUBREDDIT,\r\n  INVALIDATE_SUBREDDIT,\r\n  REQUEST_POSTS,\r\n  RECEIVE_POSTS\r\n} from './actions'\r\nfunction selectedSubreddit(state = 'reactjs', action) {\r\n  switch (action.type) {\r\n    case SELECT_SUBREDDIT:\r\n      return action.subreddit\r\n    default:\r\n      return state\r\n  }\r\n}\r\nfunction posts(\r\n  state = {\r\n    isFetching: false,\r\n    didInvalidate: false,\r\n    items: []\r\n  },\r\n  action\r\n) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n      return Object.assign({}, state, {\r\n        didInvalidate: true\r\n      })\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: true,\r\n        didInvalidate: false\r\n      })\r\n    case RECEIVE_POSTS:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        didInvalidate: false,\r\n        items: action.posts,\r\n        lastUpdated: action.receivedAt\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\nfunction postsBySubreddit(state = {}, action) {\r\n  switch (action.type) {\r\n    case INVALIDATE_SUBREDDIT:\r\n    case RECEIVE_POSTS:\r\n    case REQUEST_POSTS:\r\n      return Object.assign({}, state, {\r\n        [action.subreddit]: posts(state[action.subreddit], action)\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\nconst rootReducer = combineReducers({\r\n  postsBySubreddit,\r\n  selectedSubreddit\r\n})\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport rootReducer from './reducers'\r\nconst loggerMiddleware = createLogger()\r\nexport default function configureStore(preloadedState) {\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    applyMiddleware(thunkMiddleware, loggerMiddleware)\r\n  )\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class Picker extends Component {\r\n  render() {\r\n    const { value, onChange, options } = this.props\r\n    return (\r\n      <span>\r\n        <h1>{value}</h1>\r\n        <select onChange={e => onChange(e.target.value)} value={value}>\r\n          {options.map(option => (\r\n            <option value={option} key={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </span>\r\n    )\r\n  }\r\n}\r\nPicker.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default class Posts extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.posts.map((post, i) => (\r\n          <li key={i}>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\nPosts.propTypes = {\r\n  posts: PropTypes.array.isRequired\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  selectSubreddit,\r\n  fetchPostsIfNeeded,\r\n  invalidateSubreddit\r\n} from '../actions'\r\nimport Picker from '../components/Picker'\r\nimport Posts from '../components/Posts'\r\nclass AsyncApp extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleRefreshClick = this.handleRefreshClick.bind(this)\r\n  }\r\n  componentDidMount() {\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.selectedSubreddit !== prevProps.selectedSubreddit) {\r\n      const { dispatch, selectedSubreddit } = this.props\r\n      dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n    }\r\n  }\r\n  handleChange(nextSubreddit) {\r\n    this.props.dispatch(selectSubreddit(nextSubreddit))\r\n    this.props.dispatch(fetchPostsIfNeeded(nextSubreddit))\r\n  }\r\n  handleRefreshClick(e) {\r\n    e.preventDefault()\r\n    const { dispatch, selectedSubreddit } = this.props\r\n    dispatch(invalidateSubreddit(selectedSubreddit))\r\n    dispatch(fetchPostsIfNeeded(selectedSubreddit))\r\n  }\r\n  render() {\r\n    const { selectedSubreddit, posts, isFetching, lastUpdated } = this.props\r\n    return (\r\n      <div>\r\n        <Picker\r\n          value={selectedSubreddit}\r\n          onChange={this.handleChange}\r\n          options={['reactjs', 'frontend']}\r\n        />\r\n        <p>\r\n          {lastUpdated && (\r\n            <span>\r\n              Last updated at {new Date(lastUpdated).toLocaleTimeString()}.{' '}\r\n            </span>\r\n          )}\r\n          {!isFetching && (\r\n            <button onClick={this.handleRefreshClick}>Refresh</button>\r\n          )}\r\n        </p>\r\n        {isFetching && posts.length === 0 && <h2>Loading...</h2>}\r\n        {!isFetching && posts.length === 0 && <h2>Empty.</h2>}\r\n        {posts.length > 0 && (\r\n          <div style={{ opacity: isFetching ? 0.5 : 1 }}>\r\n            <Posts posts={posts} />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nAsyncApp.propTypes = {\r\n  selectedSubreddit: PropTypes.string.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  isFetching: PropTypes.bool.isRequired,\r\n  lastUpdated: PropTypes.number,\r\n  dispatch: PropTypes.func.isRequired\r\n}\r\nfunction mapStateToProps(state) {\r\n  const { selectedSubreddit, postsBySubreddit } = state\r\n  const { isFetching, lastUpdated, items: posts } = postsBySubreddit[\r\n    selectedSubreddit\r\n  ] || {\r\n    isFetching: true,\r\n    items: []\r\n  }\r\n  return {\r\n    selectedSubreddit,\r\n    posts,\r\n    isFetching,\r\n    lastUpdated\r\n  }\r\n}\r\nexport default connect(mapStateToProps)(AsyncApp)","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from '../configureStore'\r\nimport AsyncApp from './AsyncApp'\r\nconst store = configureStore()\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <AsyncApp />\r\n      </Provider>\r\n    )\r\n  }\r\n}","import 'core-js'\r\nimport 'regenerator-runtime'\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\nimport Root from './containers/Root'\r\nrender(<Root />, document.getElementById('root'))"],"sourceRoot":""}